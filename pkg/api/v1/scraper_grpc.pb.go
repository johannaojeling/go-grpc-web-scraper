// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/scraper.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	ScrapeUrl(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (ScraperService_ScrapeUrlClient, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) ScrapeUrl(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (ScraperService_ScrapeUrlClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScraperService_ServiceDesc.Streams[0], "/scraper.ScraperService/ScrapeUrl", opts...)
	if err != nil {
		return nil, err
	}
	x := &scraperServiceScrapeUrlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScraperService_ScrapeUrlClient interface {
	Recv() (*ScrapeResponse, error)
	grpc.ClientStream
}

type scraperServiceScrapeUrlClient struct {
	grpc.ClientStream
}

func (x *scraperServiceScrapeUrlClient) Recv() (*ScrapeResponse, error) {
	m := new(ScrapeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility
type ScraperServiceServer interface {
	ScrapeUrl(*ScrapeRequest, ScraperService_ScrapeUrlServer) error
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScraperServiceServer struct {
}

func (UnimplementedScraperServiceServer) ScrapeUrl(*ScrapeRequest, ScraperService_ScrapeUrlServer) error {
	return status.Errorf(codes.Unimplemented, "method ScrapeUrl not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_ScrapeUrl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScrapeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScraperServiceServer).ScrapeUrl(m, &scraperServiceScrapeUrlServer{stream})
}

type ScraperService_ScrapeUrlServer interface {
	Send(*ScrapeResponse) error
	grpc.ServerStream
}

type scraperServiceScrapeUrlServer struct {
	grpc.ServerStream
}

func (x *scraperServiceScrapeUrlServer) Send(m *ScrapeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScrapeUrl",
			Handler:       _ScraperService_ScrapeUrl_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/scraper.proto",
}
